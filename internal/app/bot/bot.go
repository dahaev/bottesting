package appbot

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/dahaev/bottesting/pkg/models"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	bot         *tgbotapi.BotAPI
	service     service
	userState   map[int64]string
	userChatIDS map[int64]struct{}
}

type MessageData struct {
	MessageID int
	ChatID    int64
	Keyboard  *tgbotapi.InlineKeyboardMarkup
}

func New(token string) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal("cannot start bot", err)
		return nil, err
	}
	return &Bot{
		bot:         bot,
		userState:   make(map[int64]string),
		userChatIDS: make(map[int64]struct{}),
	}, nil
}

func (b *Bot) SendMainMenu(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø")
	buttonRegistration := tgbotapi.NewKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
	buttonAuth := tgbotapi.NewKeyboardButton("–î–æ—Å—Ç—É–ø")
	row := tgbotapi.NewKeyboardButtonRow(buttonRegistration, buttonAuth)
	keyboard := tgbotapi.NewReplyKeyboard(row)
	msg.ReplyMarkup = keyboard
	b.bot.Send(msg)
	b.userState[update.Message.Chat.ID] = "Registration/access"
}

func (b *Bot) SendAnnounce() {

	for key := range b.userChatIDS {
		btn1 := tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", "btn1")
		btn2 := tgbotapi.NewInlineKeyboardButtonData("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "btn2")
		btn3 := tgbotapi.NewInlineKeyboardButtonData("–û –∫–æ–º–ø–∞–Ω–∏–∏", "btn3")
		row1 := tgbotapi.NewInlineKeyboardRow(btn1, btn2)
		row2 := tgbotapi.NewInlineKeyboardRow(btn3)

		photo := b.CreateMessage(key)
		photo.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(row1, row2)
		_, err := b.bot.Send(photo)

		if err != nil {
			log.Println("huy")
		}
	}
}

func (b *Bot) Start() {
	b.bot.Debug = false

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.bot.GetUpdatesChan(u)
	ticker := time.NewTicker(20 * time.Second)
	go func() {
		for {
			select {
			case <-ticker.C:
				b.SendAnnounce()
			}
		}
	}()

	for update := range updates {
		if update.Message != nil { // –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ.")
			if _, err := b.bot.Send(msg); err != nil {
				log.Panic(err)
			}
			b.userChatIDS[update.Message.Chat.ID] = struct{}{}
			fmt.Println("WE ARE HEREEEE 99")
		}
		if update.CallbackQuery != nil {
			data := update.CallbackQuery.Data

			// –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

			switch data {
			case "btn2":
				chatID := update.CallbackQuery.Message.Chat.ID
				contacts := fmt.Sprintf("\n%s\n‚òéÔ∏é - %s\nüìß-%s", "Karolina", "+7 (267) 632-32-32", "@karolina")
				//msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, contacts)
				msg := tgbotapi.NewMessage(chatID, contacts)
				msg.ReplyToMessageID = update.CallbackQuery.Message.MessageID
				_, err := b.bot.Send(msg)
				if err != nil {
					log.Println(err)
				}
			case "btn3":
				chatID := update.CallbackQuery.Message.Chat.ID
				photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("ozon_logo.jpeg"))
				contacts := fmt.Sprintf("Ozon ‚Äî –º—É–ª—å—Ç–∏–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, —Å —Ä–∞–∑–≤–∏—Ç–æ–π –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Ç—å—é. –ö–æ–º–ø–∞–Ω–∏—è –≤—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø-5 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤ –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –±–∏–∑–Ω–µ—Å –≤ –†–æ—Å—Å–∏–∏, —Å—Ç—Ä–∞–Ω–∞—Ö –°–ù–ì, –ö–∏—Ç–∞–µ –∏ –¢—É—Ä—Ü–∏–∏. –ü–æ –∏—Ç–æ–≥–∞–º –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã 2023 –≥–æ–¥–∞ –æ–±–æ—Ä–æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –ø—Ä–µ–≤—ã—Å–∏–ª 675 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π. –ù–∞ Ozon —Ç–æ—Ä–≥—É–µ—Ç –±–æ–ª–µ–µ 300 000 –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ –±–æ–ª–µ–µ 200 –º–ª–Ω —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π. –ü–ª–∞—Ç—Ñ–æ—Ä–º—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ –ø–æ—Å–µ—â–∞–µ—Ç –±–æ–ª–µ–µ 65 –º–ª–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –†—É–Ω–µ—Ç–∞, –∞ —á–∏—Å–ª–æ –µ–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç–∏–≥–ª–æ 40 –º–ª–Ω —á–µ–ª–æ–≤–µ–∫.")
				//msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, contacts)
				photo.Caption = contacts
				photo.ReplyToMessageID = update.CallbackQuery.Message.MessageID
				_, err := b.bot.Send(photo)
				if err != nil {
					log.Println(err)
				}
			}
		}
	}
}

//for update := range updates {
//	if update.Message == nil {
//		continue
//	}
//	if currentState, ok := b.userState[update.Message.Chat.ID]; ok {
//		if currentState == "Registration/access" {
//			if update.Message.Text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" {
//				//msgTG := tgbotapi.NewMessage(update.Message.Chat.ID, b.CreateText())
//				b.bot.Send(b.CreateMessage(update))
//			} else if update.Message.Text == "–î–æ—Å—Ç—É–ø" {
//				msgTG := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –Ω–∞–∂–∞–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ú—É–¥–∏–ª–∞")
//				b.bot.Send(msgTG)
//			}
//			regMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - —ç—Ç–æ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤!")
//			buttonNext := tgbotapi.NewKeyboardButton("next")
//			rowReg := tgbotapi.NewKeyboardButtonRow(buttonNext)
//			keyboardReg := tgbotapi.NewReplyKeyboard(rowReg)
//			regMsg.ReplyMarkup = keyboardReg
//			b.bot.Send(regMsg)
//		}
//	} else {
//		b.SendMainMenu(update)
//	}
//}

//keyboard := tgbotapi.NewInlineKeyboardMarkup(
//	tgbotapi.NewInlineKeyboardRow(
//		tgbotapi.NewInlineKeyboardButtonData("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "registration"),
//		tgbotapi.NewInlineKeyboardButtonData("–î–æ—Å—Ç—É–ø", "auth"),
//	),
//)
//keyboard = tgbotapi.New
//msg.ReplyMarkup = keyboard
//b.bot.Send(msg)
//menu := b.CreateMenu()
//msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Hello")
//msg.ReplyMarkup = menu
//b.bot.Send(msg)
//
//photo := b.CreateMessage(update)
//btn1 := tgbotapi.NewInlineKeyboardButtonData("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "btn1")
//btn2 := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∑—ã–≤—ã", "btn2")
//row := tgbotapi.NewInlineKeyboardRow(btn1, btn2)
//keyboard := tgbotapi.NewInlineKeyboardMarkup(row)
//
//–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
//photo.ReplyMarkup = keyboard
//b.bot.Send(photo)

// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
//
//	func (b *Bot) HandleMessage(message *tgbotapi.Message, update tgbotapi.Update) {
//		switch message.Text {
//		case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
//			msg := tgbotapi.NewMessage(message.Chat.ID, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞")
//			b.bot.Send(msg)
//		case "–î–æ—Å—Ç—É–ø":
//
//		}
//	}
func (b *Bot) CreateMessage(chatID int64) tgbotapi.PhotoConfig {
	//photofile, err := os.Open("1.jpg")
	//fmt.Println(err)
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath("ozon.jpeg"))
	photo.Caption = b.CreateTextOzon()
	return photo
}

func (b *Bot) CreateTextOzon() string {
	//—ÅompanyName := "OZON"
	location := "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
	salary := "üí∂ –æ—Ç 55 000"
	time := "üïû —Å–º–µ–Ω–∞ –¥–æ 10 —á–∞—Å–æ–≤"
	account := "üíå @karolina"

	oby := "üìã —Ç–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —á—Ç–µ–Ω–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω. " +
		"–ó–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–Ω–∏–º–∞–Ω–∏—é –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Ä–∞—Å—à–∏—Ä—è—Ç –≤–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∏ —É–ª—É—á—à–∞—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ –ø–æ—Ä—è–¥–∫–∞ —Å–ª–æ–≤." +
		" –¢–µ–∫—Å—Ç—ã –Ω–∏–∂–µ –ø—Ä–∏–∑–≤–∞–Ω—ã –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤–∞–º –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"

	sendMessage := fmt.Sprintf("%s\nüìç %s\n%s\n%s\n%s\n%s", "OZON", location, oby, salary, time, account)

	return sendMessage
}

type service interface {
	CreateLadyAccount(ctx context.Context, account *models.Account) error
	GetAccountLady(ctx context.Context, userName string) (*models.Account, error)
	CreateDonAccount(ctx context.Context, username string) error
	GetDonAccount(ctx context.Context, userName string) (*models.DonAccount, error)
	CreateReview(ctx context.Context, ladyName string, donName string, review string, rating int) error
	GetLadyReviews(ctx context.Context, ladyName string) ([]models.Review, error)
}
